// {
//   "gitlab.featureFlags.languageServerWebviews":true,
// }

{
  /* GitLab VS Code Extension */
  "gitlab.debug": true,
  // "gitlab.ca": "/Users/tomas/Downloads/gitlab-com-chain.pem",
  "gitlab.webviewTimeoutSeconds": 20,
  // "gitlab.featureFlags.codeSuggestionsClientDirectToGateway": true,
  "gitlab-lsp.trace.server": "verbose",
  // "gitlab.debug": true,
  "gitlab.featureFlags.languageServerWebviews":true,
  "gitlab.featureFlags.agenticDuoChat": true,
  "gitlab.featureFlags.fixWithDuoQuickChatCodeActions": true,
  "gitlab.duo.workflow.executor": "node",
  // "gitlab.featureFlags.singleAccount":false,
  "gitlab.duoCodeSuggestions.additionalLanguages": [
    "powershell",
  ],
  // "gitlab.duoWorkflow.dockerSocket": "/does-not-exist/docker.sock",
  "gitlab.showProjectMergeRequests": false,
  "gitlab.duoCodeSuggestions.enabledSupportedLanguages": {
    // "scala": false,
    "php": false,
    "sql": false
  },
  // "gitlab.ignoreCertificateErrors": true,
  // "gitlab.duoWorkflow.dockerSocket": "/Users/tomas/.colima/default/docker.sock",
  "gitlab.keybindingHints.enabled": true,
  // "gitlab.featureFlags.streamCodeGenerations": false,
  // "gitlab.duo.enabledWithoutGitlabProject": false
  // "gitlab.trackingUrl": "http://localhost:9091",
  /* GitLab VS Code Extension END */

  "editor.inlineSuggest.logFetch": true,

  // "keyboard.dispatch": "keyCode",
  // Enable per-language
  "[javascript]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "javascript.updateImportsOnFileMove.enabled": "always",
  "cSpell.userWords": ["gitter", "prerequisities", "webapp", "zettelkasten"],
  "cSpell.language": "en-GB",
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "typescript.updateImportsOnFileMove.enabled": "always",
  "git.autofetch": true,
  "go.formatTool": "goimports",
  "go.coverOnSave": true,
  "files.associations": {
    "*.mongo": "javascript"
  },
  "git.confirmSync": false,
  "go.useLanguageServer": true,
  "markdown.extension.orderedList.autoRenumber": false,
  "markdown.extension.orderedList.marker": "one",
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },

  "files.enableTrash": false,
  "editor.fontFamily": "JetBrains Mono",
  "editor.fontLigatures": true,
  // I'm trying to make sure that autocomplete doesn't conflict with snippets
  // https://stackoverflow.com/questions/41348083/tab-is-conflicting-intellisense-and-snippets-in-vs-code
  // "editor.tabCompletion": "off",
  // trying to make sure that snippets are selected first
  // "editor.snippetSuggestions":"top",
  // "editor.suggestSelection": "first",

  "workbench.statusBar.visible": true,
  "editor.minimap.enabled": false,
  "extensions.ignoreRecommendations": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "prettier.singleQuote": true,
  "explorer.confirmDragAndDrop": false,
  "git.enableSmartCommit": true,
  "extensions.autoCheckUpdates": false,
  "calva.prettyPrintingOptions": {
    "maxDepth": 100,
    "enabled": true,
    "printEngine": "pprint",
    "width": 120,
    "maxLength": 50
  },
  "prettier.documentSelectors": ["*.js", "*.ts", "*.json", "*.css", "*.scss"],
  "vim.easymotion": true,
  "vim.camelCaseMotion.enable": true,
  "vim.leader": "<space>",
  "vim.sneak": true,
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["g", "z"],
      "commands": ["workbench.action.toggleZenMode"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },
    {
      "before": ["g", "d"],
      "commands": ["editor.action.revealDefinition"]
    },
    {
      "before": ["<leader>", "r"],
      "commands": ["editor.action.rename"]
    },
    { "before": ["<C-h>"], "after": ["<C-w>", "h"] },
    { "before": ["<C-j>"], "after": ["<C-w>", "j"] },
    { "before": ["<C-k>"], "after": ["<C-w>", "k"] },
    { "before": ["<C-l>"], "after": ["<C-w>", "l"] }
  ],
  "[clojure]": {
    "editor.defaultFormatter": "betterthantomorrow.calva",
    "editor.wordSeparators": "\t ()\"':,;~@#$%^&{}[]`",
    "editor.autoClosingBrackets": "always",
    "editor.autoClosingQuotes": "always",
    "editor.formatOnType": true,
    "editor.autoIndent": "full",
    "editor.formatOnPaste": true,
    "files.trimTrailingWhitespace": false,
    "editor.matchBrackets": "never",
    "editor.parameterHints.enabled": false,
    "editor.guides.indentation": false
  },
  "go.toolsManagement.autoUpdate": true,
  "workbench.sideBar.location": "right",
  "remote.SSH.defaultExtensions": ["gitpod.gitpod-remote-ssh"],
  "remote.SSH.configFile": "/var/folders/zf/7hg90bwn3871zcg3911dmc_00000gn/T/gitpod_ssh_config-32949-wYDyi5brBWcQ",
  "diffEditor.ignoreTrimWhitespace": false,
  "[go]": {
    "editor.defaultFormatter": "golang.go"
  },
  "editor.stickyScroll.enabled": true,
  "redhat.telemetry.enabled": true,
  "[sql]": {
    "editor.defaultFormatter": "adpyke.vscode-sql-formatter"
  },

  "cody.serverEndpoint": "https://sourcegraph.com/",
  // for GitLab CI https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#configure-your-ide-to-support-reference-tags
  "yaml.customTags": ["!reference sequence"],
  "window.zoomLevel": 1,
  "[c]": {
    "editor.defaultFormatter": "ms-vscode.cpptools"
  },
  "window.nativeTabs": true,
  "workbench.editor.enablePreviewFromCodeNavigation": true,
  "workbench.editor.enablePreviewFromQuickOpen": true,
  "git.replaceTagsWhenPull": true,

  "proofer.prompts": [
    {
      "name": "Paragraph flow",
      "systemPrompt": "You're my proofreader.\n\nHow we'll proceed:\n\n1. I'll provide you with an article.\n\n2. You'll analyze and identify the main idea of the article, and how each subheader helps get the main idea across.\n\n3. You'll give me SPECIFIC suggestions on:\n\n3.1. the overall flow of ideas in the subheaders\n\n3.2. the overall flow of the paragraphs\n\n4. Then you output this exact string: %%%%%\n\n5. Then provide the new version of the article with your suggestions worked in but without any commentary. Don't change cited text.\n\n This is the article:"
    },
    {
      "name": "no that or it",
      "systemPrompt": "You are my proofreader. I'll provide you with a text. You'll replace all some or all demonstrative pronouns to increase the text clarity. Only respond with the new version of the text. This is the text:\n\n"
    },
    {
      "name": "Active verbs",
      "systemPrompt": "You are my proofreader. I'll provide you with a text. You'll replace all inactive verbs with active verbs (for example 'A grandfather clock was in the corner' changes to 'A grandfather clock towered in the corner').  Only respond with the new version of the text. This is the text:\n\n"
    },
    {
      "name": "Fix all grammar issues",
      "systemPrompt": "You are my proofreader. I'll provide you with a text. Fix all grammar mistakes. If I there are words that are not correctly used, replace them with better words.  Only respond with the new version of the text. This is the text:\n\n"
    },
    {
      "name": "Fix awkward expressions",
      "systemPrompt": "In the following text, replace all expressions that would seem awkward to a native English speaker with idioms/phrases that would seem natural. If I there are words that are not correctly used, replace them with better words. If the text uses simple words, don't replace them with more complex words unless you are fixing an awkward expression. Only respond with the new version of the text. This is the text:\n\n"
    },
    {
      "name": "Make sentences shorter",
      "systemPrompt": "You are my proofreader. I'll provide you with a text. If a shorter or simpler word can be used, use it. If the sentence/paragraph can be made shorter without significant change to the meaning, shorten it. Only respond with the new version of the text. This is the text:\n\n"
    }
  ],
  "gitlens.ai.experimental.model": "anthropic:claude-3-5-sonnet-20240620",
  "window.confirmSaveUntitledWorkspace": false,
  "continue.enableTabAutocomplete": false,
  "update.mode": "manual",
  "gitlab.duoCodeSuggestions.preferredAccount": "viktomas",
  "coderider.autocompleteEnhance.enable": false,
  "haskell.manageHLS": "GHCup",
  "yaml.schemas": {
    "/Users/tomas/.vscode-insiders/extensions/continue.continue-1.1.24-darwin-arm64/config-yaml-schema.json": [
      ".continue/**/*.yaml"
    ]
  },
  "[xml]": {
    "editor.defaultFormatter": "redhat.vscode-xml"
  }
}
